Exercises

Create a file named time_complexity_basics_answers.txt and place your answers within it.

1. What is time complexity and what is its relation to algorithms?

A: Time complexity is the estimated time a program takes to run. It is calculated by adding up the instructions needed to complete an algorithm. Time complexity is used to determine the efficiency of an algorithm.

2. What is runtime?

A: Runtime is the actual amount of time an algorithm takes to run. It is sometimes used interchangeably with time complexity.

3. How is the runtime of an algorithm calculated?

A: Runtime is calculated by adding the number of instructions needed to complete an algorithm, simplifying the expression to the largest term, and finally dropping any constants. The final calculation is expressed in Big O function notation (i.e. O(n))

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A: 
1. Constant Growth Rate - O(1)
2. Logarithmic Growth Rate - O(log n)
3. Linear Growth Rate - O(n)
4. Log-Linear Growth Rate - O(n log n)
5. Quadratic Growth Rate - O(n^2)
6. Exponential Growth Rate - O(2^n)
7. Factorial Growth Rate - O(n!)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: A real life example of an exponential growth rate (O(2^n)) could be an invasive species with no predators in their new environment. In Minnesota we have an invasive species in our lakes and rivers called the zebra mussel. Because they have no natural predators, they grow exponentially until the waters food or oxygen is depleted. While the exact rate in which the mussel double in population is erratic, this example shows how one or two animals can turn into thousands very quickly. 

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: The time complexity of this function is Linear Growth Rate - O(n).

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: The time complexity of this function is Quadratic Growth Rate - O(n^2).

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: The time complexity of this function is Exponential Growth Rate - O(2^n).

9. Out of the code snippets you just saw, which is the most time efficient?

A: The most time efficient is Linear Growth Rate - O(n).
