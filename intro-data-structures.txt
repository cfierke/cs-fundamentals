Exercises:

1. A line of people at an amusement park ride.

- The line is composed of members, represented as strings.
- There is a front to the line, as well as a back.
- When someone enters the line, place them at the end.
- People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

A:
const peopleInLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

A:
peopleInLine.push("Mary");

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

A:
const indexOfPerson = (line, person) => {
  return line.indexOf(person);
}

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

A:
const findPerson = (line, person) => {
  for (let i = 0; i < line.length; i++) {
    if (line[i] == person) {
      return `${person} is at index ${line.indexOf(person)}`
    } 
  }
  return `${person} cannot be found`
};
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

A:
const cutInLine = (line, person1, person2) => {
   let linePosition = line.indexOf(person1);
   return line.splice(linePosition, 0, person2);
};

f) If Patrick wants to leave the line, how would you delete him from the array?

A:
const leaveLine = (line, person1) => {
   let linePosition = line.indexOf(person1);
   return line.splice(linePosition, 1);
};

2. Provide another real-world example that you can model using a data structure.

A: A real world example of a data structure might be cars parked on one side of the street. Each car would represent a different block of data (ie. “Toyota”,”Ford”, “Kia”, etc.). 

3. How would your data structure allow developers to access and manipulate the data?

A: The cars would be accessed from left to right like an array. The leftmost car being the first in the array [0] and the rightmost car would be the last [9]. Cars would be added or removed as they occupied and left their spots.



