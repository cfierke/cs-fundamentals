Exercises

For exercises requiring code, you are free to use the language of your choice.

Create a file named algos_searching_answers.txt and answer these questions in it:

Short Answer
1. What is a real-life scenario that uses linear search?

A: One real life example of a linear search is looking for valuable coins in a container full of coins. Each coin must be taken out one by one and searched to see if it is valuable.

2. What is a real-life scenario that uses binary search?

A: One real life example of a binary search is looking for a movie by title at a movie rental place. If you are searching for the movie “This is Spinal Tap” you would probably start somewhere in the middle (halving your search) and move down to the t’s (narrowing your search further) until you find the title you are looking for.

3. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using linear search?

A: It would take seven iterations.

4. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using binary search?

A: It would take four iterations.

5. Given an unsorted collection of a million items, which algorithm would you choose between linear search and binary search? Explain your reasoning.

A: A linear search would be best suited for a search containing a million unsorted items. Although a linear search must go through each item individually, a binary search will not work because it is not sorted. A binary search must be sorted because it needs to know the list order so it can split the list in half.

6. Given a sorted collection of a million items, which algorithm would you choose between linear search and binary search? Explain your reasoning.

A: A binary search would be best suited for a search containing a million sorted items. Because it is sorted and it knows the order of the list, a binary search can split the list in half each time it iterates through the list. This will drastically cut down on the time complexity of the search.

Programming Assignment:

1. You and a friend have set a wager to see who can find the word "Albatross" in the dictionary the fastest. Write a program to allow you to win the bet.

A:
const findWord = (dictionary, word) => {
 if (!Array.isArray(dictionary)) {
   return 'This is not a dictionary!';
 }
 
 let low = dictionary[0];
 let high = dictionary[dictionary.length -1];
 
 while (low <= high) {
   let mid = (dictionary.indexOf(low) + dictionary.indexOf(high)) / 2;
   mid = Math.floor(mid);
  
   if(dictionary[mid] > word) {
     high = dictionary[mid -1];
   }
   else if (dictionary[mid] < word) {
     low = dictionary[mid + 1];
   }
   else {
     return `${dictionary[mid]} has been found!`;
   }
 }
 return 'Your word is not in the dictionary!';
}
 
let websters = ['albatross', 'beans', 'heat valve', 'monkey', 'taco', 'zebra'];
 
findWord(websters, 'albatross');


2. You work at a pet store, and a child has asked you to net the only white-spotted goldfish from the fish tank. Write a program that will help you net the right fish.

A: 
const findFish = (tank, fish) => {
 if (!Array.isArray(tank)) {
   return 'This is not a fish tank!'
 } else {
   for (i = 0; i < tank.length; i++) {
     if (tank[i] === fish) {
       return `The ${fish} fish has been found!`;
     }
   }
   return `There are no ${fish} fish in this tank`;
 }
}
 
let fishTank = ['beta', 'tetra', 'danios', 'guppy', 'pleco'];
 
findFish(fishTank, 'pleco');